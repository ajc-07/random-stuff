// ==UserScript==
// @name         SAT tailored practice viewer (Stopwatch + Show Your Answer with Feedback)
// @namespace    http://tampermonkey.net/
// @version      2025-06-13
// @description  Keep original visuals; force-show answer on click; show “Your Answer: X ✔️/❌” with color flash; force-hide on next question; stopwatch that turns red at 1:00.
// @author       ChatGPT
// @match        https://mypractice.collegeboard.org/questionbank/tailored
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // —— 1. Your original CSS + stopwatch CSS —— //
    function GM_addStyle(css) {
        const id = "GM_addStyleBy8626";
        let style = document.getElementById(id);
        if (!style) {
            style = document.createElement('style');
            style.id = id;
            document.head.appendChild(style);
        }
        style.sheet.insertRule(css, style.sheet.cssRules.length);
    }

    // Original visuals
    GM_addStyle("#questionbank-header {display:none}");
    GM_addStyle("#tailored-review {padding-top:0!important;height:700px!important}");
    GM_addStyle(".review-window {margin:0!important;max-width:100vw!important;height:700px!important}");
    GM_addStyle("cbw-footer {display:none!important}");
    GM_addStyle("#header {display:none!important}");
    GM_addStyle(".assessment-title {display:flex;flex-direction:row!important}");
    GM_addStyle(".header {height:3vh!important}");
    GM_addStyle(".footer {z-index:999999999!important;position:absolute!important;width:100vw!important;justify-content:center!important;background-color:rgba(255,255,255,1);bottom:0!important;height:7vh!important}");
    GM_addStyle(".tailored-question-content {height:85vh!important;padding:20px!important}");
    GM_addStyle(".body {overflow:clip!important;height:90vh!important}");
    //GM_addStyle(".cb-checkbox {display:none!important}"); // removed
    GM_addStyle(".tailored-answer-content {position:fixed;right:0;width:400px;height:85vh!important;background:white;padding:20px;box-shadow:none}");
    GM_addStyle("html, body {overflow:hidden!important}");

    // Stopwatch CSS
    GM_addStyle(`
        #tmkp_stopwatch {
            position: fixed;
            top: 10px;
            right: 10px;
            background-color: rgba(0,0,0,0.7);
            color: white;
            font-size: 18px;
            font-weight: bold;
            padding: 6px 10px;
            border-radius: 4px;
            z-index: 1000000;
        }
    `);
    GM_addStyle(`
        #tmkp_stopwatch.red {
            background-color: red !important;
        }
    `);

    // Feedback line CSS
    GM_addStyle(`
        .my-answer-comparison.correct {
            background-color: rgba(0,255,0,0.2);
            transition: background-color 0.5s ease;
        }
    `);
    GM_addStyle(`
        .my-answer-comparison.incorrect {
            background-color: rgba(255,0,0,0.2);
            transition: background-color 0.5s ease;
        }
    `);

    // —— 2. Stopwatch logic —— //
    let stopwatchIntervalId = null;
    let secondsElapsed = 0;

    function createStopwatchElement() {
        if (document.getElementById('tmkp_stopwatch')) return;
        const div = document.createElement('div');
        div.id = 'tmkp_stopwatch';
        div.textContent = formatTime(secondsElapsed);
        document.body.appendChild(div);
    }
    function formatTime(sec) {
        const m = Math.floor(sec/60), s = sec%60;
        return `${m}:${s<10?'0':''}${s}`;
    }
    function resetStopwatch() {
        secondsElapsed = 0;
        const sw = document.getElementById('tmkp_stopwatch');
        if (sw) {
            sw.textContent = formatTime(0);
            sw.classList.remove('red');
        }
        clearInterval(stopwatchIntervalId);
        stopwatchIntervalId = setInterval(() => {
            secondsElapsed++;
            const sw2 = document.getElementById('tmkp_stopwatch');
            if (sw2) {
                sw2.textContent = formatTime(secondsElapsed);
                if (secondsElapsed>=60) sw2.classList.add('red');
            }
        }, 1000);
    }

    // —— 3. Answer panel & feedback —— //
    let lastUserAnswer = null;

    function getCurrentAnswerCheckbox() {
        return document.querySelector('input[type="checkbox"][id^="apricot_check_"]');
    }
    function getCurrentAnswerLabel() {
        const cb = getCurrentAnswerCheckbox();
        if (!cb) return null;
        let lbl = document.querySelector(`label[for="${cb.id}"]`);
        if (lbl) return lbl;
        if (cb.parentElement.tagName==='LABEL') return cb.parentElement;
        return null;
    }

    function showAnswerPanel() {
        const lbl = getCurrentAnswerLabel();
        if (lbl) lbl.click();
        setTimeout(insertAnswerComparisonLine, 100);
    }
    function hideAnswerPanel() {
        const lbl = getCurrentAnswerLabel(), cb = getCurrentAnswerCheckbox();
        if (lbl && cb && cb.checked) lbl.click();
    }

    function insertAnswerComparisonLine() {
        const panel = document.querySelector('.tailored-answer-content');
        if (!panel || panel.querySelector('.my-answer-comparison')) return;

        // Extract correct letter from panel text
        const text = panel.innerText;
        const m = text.match(/Choice\s+([A-D])\s+is\s+the\s+best\s+answer/i);
        const correct = m ? m[1] : null;
        const user = lastUserAnswer;

        // Build line: only “Your Answer: X [✔️/❌]”
        const line = document.createElement('div');
        line.className = 'my-answer-comparison ' + (user===correct?'correct':'incorrect');
        line.style.fontWeight='bold';
        line.style.marginBottom='10px';
        line.textContent = `Your Answer: ${user||'N/A'} `;
        const icon = document.createElement('span');
        icon.textContent = user===correct?'✔️':'❌';
        line.appendChild(icon);

        panel.insertBefore(line, panel.firstChild);
        if (user !== correct) {
            const leftEl = document.querySelector('.tailored-question-content');
            const leftText = leftEl ? leftEl.innerText : '';
            const rightText = panel.innerText;
            const toCopy = leftText + '\n\n' + rightText + '\n\n___________\n\n';
            navigator.clipboard.writeText(toCopy)
                .catch(err => console.error('Copy failed', err));
        }
    }

    function handleAnswerSelection(e) {
        lastUserAnswer = e.target.value;
        e.target.checked = true;
        setTimeout(showAnswerPanel, 50);
    }

    function attachAnswerListeners() {
        document.querySelectorAll('.cb-radio input[type="radio"]').forEach(radio=>{
            radio.removeEventListener('click', handleAnswerSelection);
            radio.addEventListener('click', handleAnswerSelection);
        });
    }

    // —— 4. Next button & question swaps —— //
    function attachNextButtonListener() {
        const btn = document.querySelector('div.skip-next button.cb-btn.cb-btn-primary');
        if (!btn) return;
        btn.removeEventListener('click', onNextFull);
        btn.addEventListener('click', onNextFull);
    }
    function onNextFull() {
        hideAnswerPanel();
        resetStopwatch();
    }

    function observeQuestionSwaps() {
        const container = document.getElementById('tailored-review');
        if (!container) return;
        const mo = new MutationObserver(ms=>{
            ms.forEach(m=>{
                m.addedNodes.forEach(node=>{
                    if (node.nodeType===1 && node.querySelector('input[type="checkbox"][id^="apricot_check_"]')) {
                        hideAnswerPanel();
                        attachAnswerListeners();
                        attachNextButtonListener();
                        lastUserAnswer = null;
                        resetStopwatch();
                    }
                });
            });
        });
        mo.observe(container,{childList:true,subtree:true});

        // initial
        if (container.querySelector('input[type="checkbox"][id^="apricot_check_"]')) {
            hideAnswerPanel();
            attachAnswerListeners();
            attachNextButtonListener();
            resetStopwatch();
        }
    }

    // —— 5. Init —— //
    function init() {
        const id = setInterval(()=>{
            if (document.getElementById('tailored-review')) {
                clearInterval(id);
                createStopwatchElement();
                hideAnswerPanel();
                attachAnswerListeners();
                attachNextButtonListener();
                observeQuestionSwaps();
            }
        },500);
    }

    function createStopwatchElement(){
        if (document.getElementById('tmkp_stopwatch')) return;
        const d=document.createElement('div');
        d.id='tmkp_stopwatch';
        d.textContent=formatTime(secondsElapsed);
        document.body.appendChild(d);
    }

    window.addEventListener('load', init);

})();
